<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">


  <!-- _____________________________________________ General Function Snippits
  _________________________________________ -->
  <!-- default function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Default Function</Title>
      <Shortcut>df</Shortcut>
      <Description>Code snippet for default function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$($argType$ $argName$) {
	    	$selected$ $end$
	     }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- default perameterless function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Default Perameterless Function</Title>
      <Shortcut>dpf</Shortcut>
      <Description>Code snippet for default perameterless function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$() {
	    	$selected$ $end$
	     }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- expression bodied function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied Function</Title>
      <Shortcut>ebf</Shortcut>
      <Description>Code snippet for expression bodied function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>Method</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$($argType$ $argName$) => $selected$ $end$ ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- expression bodied perameterless function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression bodied parameterless function</Title>
      <Shortcut>ebpf</Shortcut>
      <Description>Code snippet for general method</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$() => $selected$ $end$ ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Constructor with Dependency Injection -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ctord</Title>
      <Shortcut>ctord</Shortcut>
      <Description>Code snippet for constructor with Dependency Injection Support</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>classname</ID>
          <ToolTip>Class name</ToolTip>
          <Function>ClassName()</Function>
          <Default>ClassNamePlaceholder</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type of injected dependency</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>typevarname</ID>
          <ToolTip>Replace with the name of the variable</ToolTip>
          <Default>injectedDependency</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[private $type$ _$typevarname$;
        public $classname$ ($type$ $typevarname$) {
        _$typevarname$=$typevarname$;$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Static class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>static class</Title>
      <Shortcut>sclass</Shortcut>
      <Description>Code snippet for static class</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>MyClass</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[static class $name$ {
		$selected$$end$
	}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- __________________________________________ General Function Snippits End
  _______________________________________ -->


  <!-- _____________________________________________ Static Function Snippits
  _________________________________________ -->
  <!-- static default function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Static Default Function</Title>
      <Shortcut>sdf</Shortcut>
      <Description>Code snippet for static default function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ static $retType$ $funcName$($argType$ $argName$) {
	    	$selected$ $end$
	     }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- static default perameterless function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Static Default Perameterless Function</Title>
      <Shortcut>sdpf</Shortcut>
      <Description>Code snippet for static default perameterless function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ static $retType$ $funcName$() {
	    	$selected$ $end$
	     }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- static expression bodied function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Static Expression Bodied Function</Title>
      <Shortcut>sebf</Shortcut>
      <Description>Code snippet for static expression bodied function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>Method</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ static $retType$ $funcName$($argType$ $argName$) => $selected$ $end$ ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- static expression bodied perameterless function snippit -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Static Expression bodied parameterless static function</Title>
      <Shortcut>sebpf</Shortcut>
      <Description>Code snippet for static expression bodied function</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ static $retType$ $funcName$() => $selected$ $end$ ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- __________________________________________ Static Function Snippits End
  _______________________________________ -->


  <!-- _____________________________________________ Console Helper Snippets
  _________________________________________ -->

  <!-- Console Read-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>console read</Title>
      <Shortcut>cr</Shortcut>
      <Description>Code snippet for Console.Read()</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Code Language="csharp">
        <![CDATA[Console.Read();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Console Read Key-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>console read key</Title>
      <Shortcut>crk</Shortcut>
      <Description>Code snippet for Console.ReadKey()</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Code Language="csharp">
        <![CDATA[Console.ReadKey();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Console Read Line-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>console read line</Title>
      <Shortcut>crl</Shortcut>
      <Description>Code snippet for Console.ReadLine()</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of variable</ToolTip>
          <Default>var</Default>
        </Literal>
        <Literal>
          <ID>varName</ID>
          <ToolTip>Name of variable</ToolTip>
          <Default>variable</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[ $retType$ $varName$ = Console.ReadLine();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- ___________________________________________ Console Helper Snippets  End
  ______________________________________ -->

  <!-- _____________________________________________ Mvc Helper Snippets
  _________________________________________ -->
  <!-- Mvc 4 Action   -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcaction4</Title>
      <Shortcut>mvcaction4</Shortcut>
      <Description>Code snippet for an mvc4 action.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Web.Mvc</Namespace>
        </Import>
      </Imports>
      <References>
        <Reference>
          <Assembly>System.Web.Mvc.dll</Assembly>
        </Reference>
      </References>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
      public ActionResult $name$() {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- Mvc 4 Post Action   -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcpostaction4</Title>
      <Shortcut>mvcpostaction4</Shortcut>
      <Description>Code snippet for an mvc5 action via http post.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Web.Mvc</Namespace>
        </Import>
      </Imports>
      <References>
        <Reference>
          <Assembly>System.Web.Mvc.dll</Assembly>
        </Reference>
      </References>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>FormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
        public ActionResult $name$($type$ $typevar$) {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 5 Action   -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcaction5</Title>
      <Shortcut>mvcaction5</Shortcut>
      <Description>Code snippet for an mvc5 action.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
        public IActionResult $name$() {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- Mvc 5 Post Action   -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcpostaction5</Title>
      <Shortcut>mvcpostaction5</Shortcut>
      <Description>Code snippet for an mvc5 action via http post.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>IFormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
      public IActionResult $name$($type$ $typevar$) {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 5 Action Pair -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>actions5</Title>
      <Shortcut>actions5</Shortcut>
      <Description>Code snippet for an mvc5 action pair.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Http</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>IFormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public IActionResult $name$() {
          return View(); $selected$  $end$
      }
      
      [HttpPost]
	    public IActionResult $name$($type$ $typevar$) {
          return View();
      }
      ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 4 Action Pair -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>actions4</Title>
      <Shortcut>actions4</Shortcut>
      <Description>Code snippet for an mvc4 action pair.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Web.Mvc</Namespace>
        </Import>
      </Imports>
      <References>
        <Reference>
          <Assembly>System.Web.Mvc.dll</Assembly>
        </Reference>
      </References>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>MAction</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>FormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
      [HttpGet]
      public ActionResult $name$() {
          return View();
      }
      [HttpPost]
	    public ActionResult $name$($type$ $typevar$) {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- _____________________________________________ Mvc Helper Snippets End
  _________________________________________ -->

  <!-- _____________________________________________ async Mvc Helper Snippets Start
  _________________________________________ -->

  <!-- Mvc 5 Action Async  -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcaction5async</Title>
      <Shortcut>mvcaction5async</Shortcut>
      <Description>Code snippet for an mvc5 action.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
      public async Task<IActionResult> $name$() {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 5 async Post Action  async  -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mvcpostaction5async</Title>
      <Shortcut>mvcpostaction5async</Shortcut>
      <Description>Code snippet for an mvc5 action via http post.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>IFormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
      public async Task<IActionResult> $name$($type$ $typevar$) {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 5 async Action Pair -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>actions5async</Title>
      <Shortcut>actions5async</Shortcut>
      <Description>Code snippet for an mvc5 async action pair.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Http</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>MAction</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>IFormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
      public async Task<IActionResult> $name$() {
          return View();$end$
      }
      
      [HttpPost]
	    public async Task<IActionResult> $name$($type$ $typevar$) {
          return View();
      }
      ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Mvc 4 async Action Pair -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>actions4async</Title>
      <Shortcut>actions4async</Shortcut>
      <Description>Code snippet for an mvc4 async action pair.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Web.Mvc</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <References>
        <Reference>
          <Assembly>System.Web.Mvc.dll</Assembly>
        </Reference>
      </References>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>MAction</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>FormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
      public async Task<ActionResult> $name$() {
          return View();
      }
      [HttpPost]
	    public async Task<ActionResult> $name$($type$ $typevar$) {
          return View();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- _____________________________________________ async Mvc Helper Snippets End
  _________________________________________ -->

  <!-- _____________________________________________ WebApi asp.net core Helper Snippets
  _________________________________________ -->

  <!-- api 5 Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>apiaction5</Title>
      <Shortcut>apiaction5</Shortcut>
      <Description>Code snippet for an .net core api action.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
        public IActionResult $name$() {
          return Ok();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- api 5 Post Action  -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>apipostaction5</Title>
      <Shortcut>apipostaction5</Shortcut>
      <Description>Code snippet for an .net core post action via http post.</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Replace with the type</ToolTip>
          <Default>IFormCollection</Default>
        </Literal>
        <Literal>
          <ID>typevar</ID>
          <ToolTip>Replace with variable name</ToolTip>
          <Default>col</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
      public IActionResult $name$($type$ $typevar$) {
          return Ok();$end$
      }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API GET Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API GET Action</Title>
      <Shortcut>apiget</Shortcut>
      <Description>Code snippet for an API GET action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>GetAction</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
        public IActionResult $name$()
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API GET Async Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API GET Async Action</Title>
      <Shortcut>apigetasync</Shortcut>
      <Description>Code snippet for an API GET async action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>GetActionAsync</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
        public async Task<IActionResult> $name$()
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API POST Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API POST Action</Title>
      <Shortcut>apipost</Shortcut>
      <Description>Code snippet for an API POST action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PostAction</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
        public IActionResult $name$($model$ model)
        {
            return Ok(model);$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API POST Async Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API POST Async Action</Title>
      <Shortcut>apipostasync</Shortcut>
      <Description>Code snippet for an API POST async action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PostActionAsync</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
        public async Task<IActionResult> $name$($model$ model)
        {
            return Ok(model);$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API PUT Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API PUT Action</Title>
      <Shortcut>apiput</Shortcut>
      <Description>Code snippet for an API PUT action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PutAction</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPut]
        public IActionResult $name$($idType$ id, $model$ model)
        {
            return Ok(model);$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API PUT Async Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API PUT Async Action</Title>
      <Shortcut>apiputasync</Shortcut>
      <Description>Code snippet for an API PUT async action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PutActionAsync</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPut]
        public async Task<IActionResult> $name$($idType$ id, $model$ model)
        {
            return Ok(model);$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API DELETE Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API DELETE Action</Title>
      <Shortcut>apidelete</Shortcut>
      <Description>Code snippet for an API DELETE action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>DeleteAction</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpDelete]
        public IActionResult $name$($idType$ id)
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- API DELETE Async Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>API DELETE Async Action</Title>
      <Shortcut>apideleteasync</Shortcut>
      <Description>Code snippet for an API DELETE async action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>DeleteActionAsync</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpDelete]
        public async Task<IActionResult> $name$($idType$ id)
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Expression Bodied Function for API GET -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied API GET</Title>
      <Shortcut>ebapiget</Shortcut>
      <Description>Code snippet for expression bodied API GET action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>GetAction</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpGet]
        public IActionResult $name$() => Ok();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Expression Bodied Function for API POST -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied API POST</Title>
      <Shortcut>ebapipost</Shortcut>
      <Description>Code snippet for expression bodied API POST action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PostAction</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPost]
        public IActionResult $name$($model$ model) => Ok(model);$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Expression Bodied Function for API PUT -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied API PUT</Title>
      <Shortcut>ebapiput</Shortcut>
      <Description>Code snippet for expression bodied API PUT action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>PutAction</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>model</ID>
          <ToolTip>Replace with the model type</ToolTip>
          <Default>MyModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpPut]
        public IActionResult $name$($idType$ id, $model$ model) => Ok(model);$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Expression Bodied Function for API DELETE -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied API DELETE</Title>
      <Shortcut>ebapidelete</Shortcut>
      <Description>Code snippet for expression bodied API DELETE action in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>DeleteAction</Default>
        </Literal>
        <Literal>
          <ID>idType</ID>
          <ToolTip>Replace with the ID type</ToolTip>
          <Default>int</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[HttpDelete]
        public IActionResult $name$($idType$ id) => Ok();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- General API Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>General API Action</Title>
      <Shortcut>apiaction</Shortcut>
      <Description>Code snippet for a general API action in .NET Core with customizable HTTP attribute</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>httpAttribute</ID>
          <ToolTip>Replace with the HTTP attribute (e.g., HttpGet, HttpPost)</ToolTip>
          <Default>HttpGet</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>Action</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[$httpAttribute$]
        public IActionResult $name$()
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- General API Async Action -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>General API Async Action</Title>
      <Shortcut>apiactionasync</Shortcut>
      <Description>Code snippet for a general API async action in .NET Core with customizable HTTP attribute</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>httpAttribute</ID>
          <ToolTip>Replace with the HTTP attribute (e.g., HttpGet, HttpPost)</ToolTip>
          <Default>HttpGet</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Replace with the name of the action</ToolTip>
          <Default>ActionAsync</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[[$httpAttribute$]
        public async Task<IActionResult> $name$()
        {
            return Ok();$end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- _____________________________________________ WebApi asp.net core Helper Snippets End
  _________________________________________ -->

  <!-- _____________________________________________ custom props Start
  _________________________________________ -->

  <!-- Static auto prop -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>props</Title>
      <Shortcut>props</Shortcut>
      <Description>Code snippet for an static automatically implemented property</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public static $type$ $property$ { get; set; }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- Constant auto prop -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>propc</Title>
      <Shortcut>propc</Shortcut>
      <Description>Code snippet for an constant automatically implemented property</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public const $type$ $property$ { get; set; }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- readonly auto property-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>propr</Title>
      <Shortcut>propr</Shortcut>
      <Description>Code snippet for an constant automatically implemented property</Description>
      <Author>Lee Haisen</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public readonly $type$ $property$ { get; set; }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Readonly Field Snippet -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Readonly Field</Title>
      <Shortcut>rof</Shortcut>
      <Description>Code snippet for generating a readonly field</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type of the field</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>fieldName</ID>
          <ToolTip>Name of the field</ToolTip>
          <Default>_myField</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[private readonly $type$ $fieldName$;$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Readonly Field with Constructor Initialization -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Readonly Field with Constructor</Title>
      <Shortcut>rofctor</Shortcut>
      <Description>Code snippet for generating a readonly field with constructor initialization</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type of the field</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>fieldName</ID>
          <ToolTip>Name of the field</ToolTip>
          <Default>_myField</Default>
        </Literal>
        <Literal>
          <ID>paramName</ID>
          <ToolTip>Name of the constructor parameter</ToolTip>
          <Default>myField</Default>
        </Literal>
        <Literal>
          <ID>className</ID>
          <ToolTip>Name of the class</ToolTip>
          <Default>MyClass</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[private readonly $type$ $fieldName$;

        public $className$($type$ $paramName$)
        {
            $fieldName$ = $paramName$;
        }$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!-- _____________________________________________ custom props End
  _________________________________________ -->

  <!-- _____________________________________________ .NET Core Snippets
  _________________________________________ -->

  <!-- Default Function for .NET Core -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Default Function .NET Core</Title>
      <Shortcut>dfcore</Shortcut>
      <Description>Code snippet for default function in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>GeneralMethod</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$($argType$ $argName$)
        {
            $selected$ $end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Primary Constructor for .NET Core -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Primary Constructor</Title>
      <Shortcut>ctorp</Shortcut>
      <Description>Code snippet for primary constructor in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>classname</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Constructor parameters</ToolTip>
          <Default>int id, string name</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[public record $classname$($parameters$);$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Expression Bodied Function for .NET Core -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Expression Bodied Function .NET Core</Title>
      <Shortcut>ebfcore</Shortcut>
      <Description>Code snippet for expression bodied function in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>Method</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ $retType$ $funcName$($argType$ $argName$) => $selected$; $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Constructor with Dependency Injection for .NET Core -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Constructor with Dependency Injection .NET Core</Title>
      <Shortcut>ctordcore</Shortcut>
      <Description>Code snippet for constructor with Dependency Injection in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>classname</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
        <Literal>
          <ID>dependencyType</ID>
          <ToolTip>Type of the injected dependency</ToolTip>
          <Default>IMyService</Default>
        </Literal>
        <Literal>
          <ID>dependencyName</ID>
          <ToolTip>Name of the injected dependency</ToolTip>
          <Default>myService</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[private readonly $dependencyType$ _$dependencyName$;

        public $classname$($dependencyType$ $dependencyName$)
        {
            _$dependencyName$ = $dependencyName$;
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Static Expression Bodied Function for .NET Core -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Static Expression Bodied Function .NET Core</Title>
      <Shortcut>sebcore</Shortcut>
      <Description>Code snippet for static expression bodied function in .NET Core</Description>
      <Author>Lee Haisen</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>accessor</ID>
          <ToolTip>Access level of the method</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>retType</ID>
          <ToolTip>Return Type of the function</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>argType</ID>
          <ToolTip>Type of the argument</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>argName</ID>
          <ToolTip>Name of the argument</ToolTip>
          <Default>argName</Default>
        </Literal>
        <Literal>
          <ID>funcName</ID>
          <ToolTip>Name of the function</ToolTip>
          <Default>Method</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[$accessor$ static $retType$ $funcName$($argType$ $argName$) => $selected$; $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- _____________________________________________ .NET Core Snippets End
  _________________________________________ -->

</CodeSnippets>